// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "github.com/fabric-creed/grpc"
	codes "github.com/fabric-creed/grpc/codes"
	status "github.com/fabric-creed/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HubClient is the client API for Hub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubClient interface {
	// 非事务跨链调用
	NoTransactionCall(ctx context.Context, in *NoTransactionCallRequest, opts ...grpc.CallOption) (*CommonResponseMessage, error)
	// 开启事务
	StartTransaction(ctx context.Context, in *StartTransactionRequest, opts ...grpc.CallOption) (*CommonResponseMessage, error)
	// 事务执行
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*CommonResponseMessage, error)
	// 提交事务
	CommitTransaction(ctx context.Context, in *CommitTransactionRequest, opts ...grpc.CallOption) (*CommonResponseMessage, error)
}

type hubClient struct {
	cc grpc.ClientConnInterface
}

func NewHubClient(cc grpc.ClientConnInterface) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) NoTransactionCall(ctx context.Context, in *NoTransactionCallRequest, opts ...grpc.CallOption) (*CommonResponseMessage, error) {
	out := new(CommonResponseMessage)
	err := c.cc.Invoke(ctx, "/Hub/NoTransactionCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) StartTransaction(ctx context.Context, in *StartTransactionRequest, opts ...grpc.CallOption) (*CommonResponseMessage, error) {
	out := new(CommonResponseMessage)
	err := c.cc.Invoke(ctx, "/Hub/StartTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*CommonResponseMessage, error) {
	out := new(CommonResponseMessage)
	err := c.cc.Invoke(ctx, "/Hub/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) CommitTransaction(ctx context.Context, in *CommitTransactionRequest, opts ...grpc.CallOption) (*CommonResponseMessage, error) {
	out := new(CommonResponseMessage)
	err := c.cc.Invoke(ctx, "/Hub/CommitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HubServer is the server API for Hub service.
// All implementations must embed UnimplementedHubServer
// for forward compatibility
type HubServer interface {
	// 非事务跨链调用
	NoTransactionCall(context.Context, *NoTransactionCallRequest) (*CommonResponseMessage, error)
	// 开启事务
	StartTransaction(context.Context, *StartTransactionRequest) (*CommonResponseMessage, error)
	// 事务执行
	SendTransaction(context.Context, *SendTransactionRequest) (*CommonResponseMessage, error)
	// 提交事务
	CommitTransaction(context.Context, *CommitTransactionRequest) (*CommonResponseMessage, error)
	mustEmbedUnimplementedHubServer()
}

// UnimplementedHubServer must be embedded to have forward compatible implementations.
type UnimplementedHubServer struct {
}

func (UnimplementedHubServer) NoTransactionCall(context.Context, *NoTransactionCallRequest) (*CommonResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoTransactionCall not implemented")
}
func (UnimplementedHubServer) StartTransaction(context.Context, *StartTransactionRequest) (*CommonResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTransaction not implemented")
}
func (UnimplementedHubServer) SendTransaction(context.Context, *SendTransactionRequest) (*CommonResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedHubServer) CommitTransaction(context.Context, *CommitTransactionRequest) (*CommonResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTransaction not implemented")
}
func (UnimplementedHubServer) mustEmbedUnimplementedHubServer() {}

// UnsafeHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubServer will
// result in compilation errors.
type UnsafeHubServer interface {
	mustEmbedUnimplementedHubServer()
}

func RegisterHubServer(s *grpc.Server, srv HubServer) {
	s.RegisterService(&_Hub_serviceDesc, srv)
}

func _Hub_NoTransactionCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoTransactionCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).NoTransactionCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hub/NoTransactionCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).NoTransactionCall(ctx, req.(*NoTransactionCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_StartTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).StartTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hub/StartTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).StartTransaction(ctx, req.(*StartTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hub/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_CommitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).CommitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hub/CommitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).CommitTransaction(ctx, req.(*CommitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Hub",
	HandlerType: (*HubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NoTransactionCall",
			Handler:    _Hub_NoTransactionCall_Handler,
		},
		{
			MethodName: "StartTransaction",
			Handler:    _Hub_StartTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _Hub_SendTransaction_Handler,
		},
		{
			MethodName: "CommitTransaction",
			Handler:    _Hub_CommitTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/protos/hub.proto",
}
